{
  "version": 3,
  "sources": ["../../src/app.js"],
  "sourcesContent": ["\"use strict\";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n// dev/app.ts\nvar import_fastify = __toESM(require(\"fastify\"));\nvar import_dotenv3 = __toESM(require(\"dotenv\"));\n\n// dev/controllers/gpt.ts\nvar import_axios = __toESM(require(\"axios\"));\nvar import_dotenv = __toESM(require(\"dotenv\"));\nimport_dotenv.default.config();\nasync function gptController(fastify) {\n  fastify.get(\n    \"/\",\n    async (request, reply) => {\n      return { result: \"gpt-api-v1\" };\n    }\n  );\n  fastify.get(\n    \"/:test\",\n    async (request, reply) => {\n      return { result: \"test\" };\n    }\n  );\n  fastify.post(\n    \"/:engine\",\n    async (request, reply) => {\n      const { engine } = request.params;\n      const { prompt, temperature, max_tokens } = request.body;\n      var resultJSON = {};\n      var objJSON = {\n        \"prompt\": prompt,\n        \"temperature\": temperature,\n        \"max_tokens\": max_tokens\n      };\n      var temp = process.env.TEMPERATURE;\n      var tok = process.env.MAX_TOKENS;\n      if (objJSON.temperature < 1) {\n        temp = objJSON.temperature;\n      }\n      if (objJSON.max_tokens < 1e3) {\n        tok = objJSON.max_tokens;\n      }\n      const apiUrl = \"https://api.openai.com/v1/engines/\" + engine + \"/completions\";\n      const data = {\n        prompt: objJSON.prompt,\n        max_tokens: tok,\n        temperature: temp\n      };\n      const options = {\n        headers: {\n          \"Content-Type\": `application/json`,\n          \"Authorization\": \"Bearer \" + process.env.OPENAI_API_KEY\n        }\n      };\n      await import_axios.default.post(apiUrl, data, options).then((response) => {\n        resultJSON[\"completion\"] = response.data.choices[0].text;\n      }).catch((error) => {\n        reply.send(error);\n      });\n      return JSON.stringify(resultJSON);\n    }\n  );\n}\n\n// dev/components/gpt.ts\nvar import_axios2 = __toESM(require(\"axios\"));\nvar import_dotenv2 = __toESM(require(\"dotenv\"));\nimport_dotenv2.default.config();\nasync function gpt(url, data, options) {\n  return new Promise(async (resolve, reject) => {\n    await import_axios2.default.post(url, data, options).then((response) => {\n      resolve(response.data.choices[0].text);\n    }).catch((error) => {\n      reject(error);\n    });\n  });\n}\n\n// dev/components/challenge.ts\nasync function sendChallenge(req, res) {\n  console.log(\"req body challenge is:\", req.body.challenge);\n  res.status(200).send(req.body.challenge);\n}\n\n// dev/controllers/slack.ts\nvar { App, AwsLambdaReceiver, subtype } = require(\"@slack/bolt\");\nvar awsLambdaReceiver = new AwsLambdaReceiver({\n  signingSecret: process.env.SLACK_SIGNING_SECRET\n});\nasync function slackController(fastify) {\n  fastify.post(\"/slack\", async (req, res) => {\n    const { type } = req.body;\n    if (type === \"url_verification\") {\n      await sendChallenge(req, res);\n      return;\n    }\n    const app2 = new App({\n      token: process.env.SLACK_BOT_TOKEN,\n      receiver: awsLambdaReceiver\n    });\n    app2.event(\"app_home_opened\", async ({ event, client, logger }) => {\n      try {\n        console.log(\"In app_home_opened\");\n        const result = await client.views.publish({\n          user_id: event.user,\n          view: {\n            \"type\": \"home\",\n            \"blocks\": [\n              {\n                \"type\": \"input\",\n                \"element\": {\n                  \"type\": \"plain_text_input\",\n                  \"multiline\": true,\n                  \"action_id\": \"plain_text_input-action\"\n                },\n                \"label\": {\n                  \"type\": \"plain_text\",\n                  \"text\": \"Enter your prompt:\",\n                  \"emoji\": true\n                }\n              }\n            ]\n          }\n        });\n        logger.info(result);\n      } catch (error) {\n        logger.error(error);\n      }\n    });\n    app2.shortcut(\"send_prompt\", async ({ shortcut, ack, client, logger }) => {\n      await ack();\n      try {\n        const result = await client.views.open({\n          trigger_id: shortcut.trigger_id,\n          view: {\n            type: \"modal\",\n            title: {\n              type: \"plain_text\",\n              text: \"My App\"\n            },\n            close: {\n              type: \"plain_text\",\n              text: \"Close\"\n            },\n            blocks: [\n              {\n                type: \"section\",\n                text: {\n                  type: \"mrkdwn\",\n                  text: \"Section 1\"\n                }\n              },\n              {\n                type: \"context\",\n                elements: [\n                  {\n                    type: \"mrkdwn\",\n                    text: \"Content 1\"\n                  }\n                ]\n              }\n            ]\n          }\n        });\n        logger.info(result);\n      } catch (error) {\n        logger.error(error);\n      }\n    });\n    app2.message(subtype(\"bot_message\"), async ({ next, say }) => {\n      await say(`bot_message`);\n      await next();\n    });\n    app2.command(\"/ask\", async ({ command, ack, say, respond }) => {\n      await ack();\n      await respond(`\nPrompt:\n` + command.text);\n      const engine = \"text-davinci-003\";\n      var temperature = new Number(process.env.TEMPERATURE);\n      var tokens = new Number(process.env.MAX_TOKENS);\n      const apiUrl = \"https://api.openai.com/v1/engines/\" + engine + \"/completions\";\n      const data = {\n        prompt: command.text,\n        max_tokens: tokens,\n        temperature\n      };\n      const options = {\n        headers: {\n          \"Content-Type\": `application/json`,\n          \"Authorization\": \"Bearer \" + process.env.OPENAI_API_KEY\n        }\n      };\n      const completion = await gpt(apiUrl, data, options);\n      await respond(completion);\n    });\n    app2.action(\"button_click\", async ({ body, ack, say }) => {\n      await ack();\n      await say(`<@${body.user.id}> clicked the button`);\n    });\n    app2.message(\"goodbye\", async ({ message, say }) => {\n      console.log(\"in goodbye\");\n      await say(`See ya later 5, <@${message.user}> :wave:`);\n    });\n    app2.message(\"hello\", async ({ message, say }) => {\n      await say({\n        blocks: [\n          {\n            \"type\": \"section\",\n            \"text\": {\n              \"type\": \"mrkdwn\",\n              \"text\": `Hey there <@${message.user}>!`\n            },\n            \"accessory\": {\n              \"type\": \"button\",\n              \"text\": {\n                \"type\": \"plain_text\",\n                \"text\": \"Click Me\"\n              },\n              \"action_id\": \"button_click\"\n            }\n          }\n        ],\n        text: `Hey there <@${message.user}>!`\n      });\n    });\n  });\n}\n\n// dev/controllers/ver.ts\nasync function versionController(fastify) {\n  fastify.get(\"/,\", (req, res) => {\n    res.status(200).send(\"v1.0.8\");\n  });\n}\n\n// dev/router/index.ts\nasync function router(fastify) {\n  console.log(\"in router\");\n  fastify.setErrorHandler((error, request, resp) => {\n    const payload = {\n      url: request.url,\n      headers: request.headers,\n      body: request.body\n    };\n    request.log.error(payload, error.message);\n    resp.send(error.message);\n  });\n  fastify.register(gptController, { prefix: \"/gpt\" });\n  fastify.register(slackController, { prefix: \"/slack\" });\n  fastify.register(versionController, { prefix: \"/ver\" });\n}\n\n// dev/app.ts\nimport_dotenv3.default.config();\nvar fastifyOptions = {\n  logger: true\n};\nvar app = (0, import_fastify.default)(fastifyOptions);\nvoid app.register(router);\napp.listen({\n  port: 8080,\n  host: \"0.0.0.0\"\n}, (err) => {\n  if (err)\n    console.error(err);\n  console.log(\"server listening on 3000\");\n});\n"],
  "mappings": "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",
  "names": []
}
