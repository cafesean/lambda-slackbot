{
  "version": 3,
  "sources": ["../../../dev/controllers/slack.ts"],
  "sourcesContent": ["\nimport { FastifyInstance } from 'fastify';\nimport { sendChallenge } from '../components/challenge'\nimport { validateSlackRequest } from '../components/_validate'\nimport { acknowledge, postToChannel } from \"./_utils\"\n\nconst { App } = require('@slack/bolt');\nimport axios from 'axios';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n// export const config = {\n//     api: {\n//       externalResolver: true,\n//     },\n// }\nconst app = new App({\n    token: process.env.SLACK_BOT_TOKEN,\n    socketMode: false,\n    appToken: process.env.SLACK_APP_TOKEN,\n    signingSecret: process.env.SLACK_SIGNING_SECRET\n});\n\nexport default async function slackController(fastify: FastifyInstance) {\n    const {\n        // set query params to number type\n        // query: { id, max_tokens, temp },\n        body: { token, challenge, type, event },\n        method,\n    } = req;\n    \n\n// console.log(\"app.bot_id=null:\", app.bot_id==null);\n// console.log(\"app.event_type:\", app.event_type);\n// console.log(\"app.event:\", JSON.stringify(app.event));\n    // var type = req.body.type\n    if (type === \"url_verification\") {\n        await sendChallenge(req, res)\n        return;\n    } else if (app.bot_id!=null || event.type != \"message\") {\n        console.log(\"IS A BOT or NOT A MESSAGE\\n***************************\\n\");\n        // res.status(200).end();\n        return;\n    }\n\n    let channel = app.channel;\n    let thread = <string>app.thread_ts;\n    let prompt =  req.body.event.text;\n\n    if (prompt.indexOf(\"\u2019\") != -1) {\n            const result = await app.client.chat.postMessage({\n            channel: event.channel,\n            thread_ts: event.ts,\n            text: \"Single quotes (\\') are not allowed.\"\n        });\n        console.log(\"Single quotes (\\') are not allowed.\");\n        // res.status(200).end();\n        return res.status(200).end();\n    } \n\n    if (!validateSlackRequest(req, signingSecret)) {\n        console.log(\"Request invalid\");\n        // res.status(500).end();\n        return res.status(200).end();\n    }\n    res.status(200).send(\"ok\");\n    // res.json({ok:true}); \n    \nconsole.log(\"NOT A BOT\");\n    \n    // var event_type = app.event_type;\n\n\n    const engine = \"text-davinci-003\";\n\n    var temperature = new Number(process.env.TEMPERATURE);\n    var tokens = new Number(process.env.MAX_TOKENS);\n\n    const apiUrl = 'https://api.openai.com/v1/engines/' + engine + '/completions';\nconsole.log(\"prompt: \", prompt);\nconsole.log(\"apiUrl: \", apiUrl);\nconsole.log(\"event.channel: \", event.channel);\nconsole.log(\"event.ts: \", event.ts);\n    const data = {\n        prompt: prompt,\n        max_tokens: tokens,\n        temperature: temperature,\n    };\n    const options = {\n        headers: {\n        \"Content-Type\": `application/json`,\n        \"Authorization\": \"Bearer \" + process.env.OPENAI_API_KEY,\n        }\n    };\n\n    var completion = \"\";\n    \n    const timer = new Promise((resolve, reject) => {\n        // Set up the timeout\n        const timer = setTimeout(() => {\n            reject(\"timed out\");\n        }, 10000);\n\n\n        // create promise chain for axios request\n        const openai = new Promise((resolve, reject) => {\n            // Set up the timeout\n            //\n            axios\n            .post(apiUrl, data, options)\n            .then(response => {\n                completion = response.data.choices[0].text;\n                // console.log(\"data: \", response.data.choices[0].text);\n                resolve(\"success\");\n            })\n            .catch(error => {\n                console.log(\"in catch error\");\n                reject(\"failure\");\n            });\n        })\n        .then((result) => {\n            result = new Promise((resolve, reject) => {\n                try{\n                    app.client.chat.postMessage({\n                        channel: event.channel,\n                        thread_ts: event.ts,\n                        text: completion\n                    });\n                    console.log(\"Slack message sent.\")\n                    resolve(\"success\");\n                    // res.status(200).end(\"ok\")\n                } catch(e) {\n                    console.log(\"catch=\",e);\n                    reject(\"failure\");\n                    // res.status(200).end(\"error\");\n                }\n            });\n            resolve(\"success\");\n        })\n        .catch((error) => {\n            reject(\"failure\");\n            console.log(\"error in catch: \", error);\n            // res.status(200).end(\"error\");\n        });\n    });\n\n\n\n    // } catch(e) {\n    //     console.log(\"catch=\",e);\n    //     res.status(200).end(\"error\");\n    // }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAEA,uBAA8B;AAC9B,sBAAqC;AAIrC,mBAAkB;AAClB,oBAAmB;AAFnB,MAAM,EAAE,QAAQ,QAAQ;AAIxB,sBAAO;AAMP,MAAM,MAAM,IAAI,IAAI;AAAA,EAChB,OAAO,QAAQ,IAAI;AAAA,EACnB,YAAY;AAAA,EACZ,UAAU,QAAQ,IAAI;AAAA,EACtB,eAAe,QAAQ,IAAI;AAAA;AAG/B,+BAA8C,SAA0B;AACpE,QAAM;AAAA,IAGF,MAAM,EAAE,OAAO,WAAW,MAAM;AAAA,IAChC;AAAA,MACA;AAOJ,MAAI,SAAS,oBAAoB;AAC7B,UAAM,oCAAc,KAAK;AACzB;AAAA,aACO,IAAI,UAAQ,QAAQ,MAAM,QAAQ,WAAW;AACpD,YAAQ,IAAI;AAEZ;AAAA;AAGJ,MAAI,UAAU,IAAI;AAClB,MAAI,SAAiB,IAAI;AACzB,MAAI,SAAU,IAAI,KAAK,MAAM;AAE7B,MAAI,OAAO,QAAQ,aAAQ,IAAI;AACvB,UAAM,SAAS,MAAM,IAAI,OAAO,KAAK,YAAY;AAAA,MACjD,SAAS,MAAM;AAAA,MACf,WAAW,MAAM;AAAA,MACjB,MAAM;AAAA;AAEV,YAAQ,IAAI;AAEZ,WAAO,IAAI,OAAO,KAAK;AAAA;AAG3B,MAAI,CAAC,0CAAqB,KAAK,gBAAgB;AAC3C,YAAQ,IAAI;AAEZ,WAAO,IAAI,OAAO,KAAK;AAAA;AAE3B,MAAI,OAAO,KAAK,KAAK;AAGzB,UAAQ,IAAI;AAKR,QAAM,SAAS;AAEf,MAAI,cAAc,IAAI,OAAO,QAAQ,IAAI;AACzC,MAAI,SAAS,IAAI,OAAO,QAAQ,IAAI;AAEpC,QAAM,SAAS,uCAAuC,SAAS;AACnE,UAAQ,IAAI,YAAY;AACxB,UAAQ,IAAI,YAAY;AACxB,UAAQ,IAAI,mBAAmB,MAAM;AACrC,UAAQ,IAAI,cAAc,MAAM;AAC5B,QAAM,OAAO;AAAA,IACT;AAAA,IACA,YAAY;AAAA,IACZ;AAAA;AAEJ,QAAM,UAAU;AAAA,IACZ,SAAS;AAAA,MACT,gBAAgB;AAAA,MAChB,iBAAiB,YAAY,QAAQ,IAAI;AAAA;AAAA;AAI7C,MAAI,aAAa;AAEjB,QAAM,QAAQ,IAAI,QAAQ,CAAC,SAAS,WAAW;AAE3C,UAAM,SAAQ,WAAW,MAAM;AAC3B,aAAO;AAAA,OACR;AAIH,UAAM,SAAS,IAAI,QAAQ,CAAC,UAAS,YAAW;AAG5C,2BACC,KAAK,QAAQ,MAAM,SACnB,KAAK,cAAY;AACd,qBAAa,SAAS,KAAK,QAAQ,GAAG;AAEtC,iBAAQ;AAAA,SAEX,MAAM,WAAS;AACZ,gBAAQ,IAAI;AACZ,gBAAO;AAAA;AAAA,OAGd,KAAK,CAAC,WAAW;AACd,eAAS,IAAI,QAAQ,CAAC,UAAS,YAAW;AACtC,YAAG;AACC,cAAI,OAAO,KAAK,YAAY;AAAA,YACxB,SAAS,MAAM;AAAA,YACf,WAAW,MAAM;AAAA,YACjB,MAAM;AAAA;AAEV,kBAAQ,IAAI;AACZ,mBAAQ;AAAA,iBAEJ,GAAN;AACE,kBAAQ,IAAI,UAAS;AACrB,kBAAO;AAAA;AAAA;AAIf,cAAQ;AAAA,OAEX,MAAM,CAAC,UAAU;AACd,aAAO;AACP,cAAQ,IAAI,oBAAoB;AAAA;AAAA;AAAA;",
  "names": []
}
