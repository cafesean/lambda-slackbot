{
  "version": 3,
  "sources": ["../../../dev/controllers/slack-exported.ts"],
  "sourcesContent": ["\nconst { App, AwsLambdaReceiver, subtype } = require('@slack/bolt');\nimport { FastifyInstance } from 'fastify';\nimport { gpt } from '../components/gpt';\nimport { sendChallenge } from '../components/challenge';\n\n// Initialize your custom receiver\nconst awsLambdaReceiver = new AwsLambdaReceiver({\n  signingSecret: process.env.SLACK_SIGNING_SECRET,\n});\n\nexport default async function slackController(fastify: FastifyInstance) {\n\n  fastify.post('/', async (req: any, res: any) => {\n\n    const { type } = req.body;\n    if (type === \"url_verification\") {\n      await sendChallenge(req, res)\n      return;\n    }\n\n\n\n    const app = new App({\n      token: process.env.SLACK_BOT_TOKEN,\n      receiver: awsLambdaReceiver,\n      // processBeforeResponse: true\n    });\n\n\n    app.event('app_home_opened', async ({ event, client, logger }: { event: any, client: any, logger: any }) => {\n      try {\n\n        console.log(\"In app_home_opened\");\n        // Call views.publish with the built-in client\n        const result = await client.views.publish({\n          // Use the user ID associated with the event\n          user_id: event.user,\n          view: {\n            \"type\": \"home\",\n            \"blocks\": [\n              {\n                \"type\": \"input\",\n                \"element\": {\n                  \"type\": \"plain_text_input\",\n                  \"multiline\": true,\n                  \"action_id\": \"plain_text_input-action\"\n                },\n                \"label\": {\n                  \"type\": \"plain_text\",\n                  \"text\": \"Enter your prompt:\",\n                  \"emoji\": true\n                }\n              }\n            ]\n          }\n        });\n\n        logger.info(result);\n      }\n      catch (error) {\n        logger.error(error);\n      }\n    });\n\n    // write a listener function for app_home_open using slack/bolt\n    app.shortcut('send_prompt', async ({ shortcut, ack, client, logger }: { shortcut: any, ack: any, client: any, logger: any }) => {\n      await ack();\n\n      try {\n        // Acknowledge shortcut request\n        // Call the views.open method using one of the built-in WebClients\n        const result = await client.views.open({\n          trigger_id: shortcut.trigger_id,\n          view: {\n            type: \"modal\",\n            title: {\n              type: \"plain_text\",\n              text: \"My App\"\n            },\n            close: {\n              type: \"plain_text\",\n              text: \"Close\"\n            },\n            blocks: [\n              {\n                type: \"section\",\n                text: {\n                  type: \"mrkdwn\",\n                  text: \"Section 1\"\n                }\n              },\n              {\n                type: \"context\",\n                elements: [\n                  {\n                    type: \"mrkdwn\",\n                    text: \"Content 1\"\n                  }\n                ]\n              }\n            ]\n          }\n        });\n\n        logger.info(result);\n      }\n      catch (error) {\n        logger.error(error);\n      }\n    });\n\n\n    app.message(subtype('bot_message'), async ({ next, say }: { next: any, say: any }) => {\n      await say(`bot_message`);\n      await next();\n    });\n\n    // app.message('send_prompt', async ({ message, ack, respondInThread }:{message:any, ack:any,respondInThread:any}) => {\n    //   // Acknowledge shortcut request\n    //   ack();\n\n    //   try {\n    //     // Send a message to the thread where the shortcut was triggered\n    //     await respondInThread({\n    //       thread_ts: message.ts,\n    //       text: 'hello'\n    //     });\n    //   } catch (error) {\n    //     console.error(error);\n    //   }\n    // });\n\n    // respond with GPT3 completion\n    app.command('/ask', async ({ command, ack, say, respond }: { command: any, ack: any, say: any, respond: any }) => {\n      // await say(`Tesla is great`);\n      // app.thread_ts = message.ts;\n      await ack();\n      await (respond(`\\nPrompt:\\n` + command.text));\n\n      const completion = await gpt(command);\n      // console.log(\"completion: \", completion);\n      await respond(completion);\n\n    });\n    app.message(async ({ message, say }: { message: any, say: any }) => {\n      // await say(`Tesla is great`);\n      // app.thread_ts = message.ts;\n\n\nconsole.log(\"In app.message\");\n      const completion = await gpt(message.text,);\n\n      await app.client.chat.postMessage({\n        channel: message.channel,\n        thread_ts: message.ts,\n        text: completion\n      })\n    });\n    // return(completion);\n    // });\n    // });\n\n\n    //     .catch((error:any) => {\n    //         return(error);\n    //     });\n    // });\n\n\n\n\n    // say() sends a message to the channel where the event was triggered\n    // await app.client.chat.postMessage({\n    //     channel: message.channel,\n    //     thread_ts: message.ts,\n    //     text: \"app = \" + JSON.stringify(app)\n    // await say(\"message = \" + JSON.stringify(message));\n    // }); \n    // if (app.bot_user_id!=null) {\n    //     // await app.client.chat.postMessage({\n    //     //     channel: message.channel,\n    //     //     thread_ts: message.ts,\n    //     //     text: \"app_user_id = \" + app.bot_user_id\n    //     // });\n\n    //     await say(\"bot_user_id = \" + message.bot_id);\n\n    //     return;\n    // }\n    // say(\"hi\");\n    // await say(\"Headers: \" + JSON.stringify(app.context.http.headers));\n\n\n    // var completion = \"\";\n\n    // new Promise(async (resolve, reject) => {\n    //     // Set up the timeout\n    //     const timer = setTimeout(() => {\n    //         reject(\"timed out\");\n    //     }, 8000);\n\n    //openai call\n\n    // await say(completion);\n    // reply to slack message in thread\n\n\n    // await say({\n    //     blocks: [\n    //     {\n    //         \"type\": \"section\",\n    //         \"text\": {\n    //         \"type\": \"mrkdwn\",\n    //         \"text\": completion\n    //         },\n    //         \"accessory\": {\n    //         \"type\": \"button\",\n    //         \"text\": {\n    //             \"type\": \"plain_text\",\n    //             \"text\": \"Click Me\"\n    //         },\n    //         \"action_id\": \"button_click\"\n    //         }\n    //     }\n    //     ],\n    //     text: completion\n    // });\n\n    // clearTimeout(timer);\n    // resolve(\"success\");\n    // .then((completion) => { //completion is the response from openai\n    // await app.client.chat.postMessage({\n    //     channel: message.channel,\n    //     thread_ts: message.ts,\n    //     text: completion\n    // });\n\n    // say(completion);\n    // console.log(\"Slack message sent.\")\n\n    // clearTimeout(timer);\n    // resolve(\"success\");\n    // res.status(200).end;\n    // })\n    // .catch((error) => {\n    // console.log(\"error in catch: \", error);\n    // reject(error);\n    // res.status(200).end;\n    // });\n\n    // }).catch((error) => {\n    // console.log(\"error in catch: \", error);\n    // reject(error);\n    // res.status(200).end;\n    // });\n\n\n    // });\n    // });\n    // Listens for an action from a button click\n    app.action('button_click', async ({ body, ack, say }: { body: any, ack: any, say: any }) => {\n      await ack();\n\n      await say(`<@${body.user.id}> clicked the button`);\n    });\n\n    // Listens to incoming messages that contain \"goodbye\"\n    app.message('goodbye', async ({ message, say }: { message: any, say: any }) => {\n      console.log(\"in goodbye\");\n      // say() sends a message to the channel where the event was triggered\n      await say(`See ya later 5, <@${message.user}> :wave:`);\n    });\n\n    // Listens to incoming messages that contain \"hello\"\n    app.message(\"hello\", async ({ message, say }: { message: any, say: any }) => {\n      // say() sends a message to the channel where the event was triggered\n      await say({\n        blocks: [\n          {\n            \"type\": \"section\",\n            \"text\": {\n              \"type\": \"mrkdwn\",\n              \"text\": `Hey there <@${message.user}>!`\n            },\n            \"accessory\": {\n              \"type\": \"button\",\n              \"text\": {\n                \"type\": \"plain_text\",\n                \"text\": \"Click Me\"\n              },\n              \"action_id\": \"button_click\"\n            }\n          }\n        ],\n        text: `Hey there <@${message.user}>!`\n      });\n    });\n\n  });\n}"],
  "mappings": "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",
  "names": []
}
