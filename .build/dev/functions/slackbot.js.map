{
  "version": 3,
  "sources": ["../../../dev/functions/slackbot.ts"],
  "sourcesContent": ["\nimport { FastifyInstance } from 'fastify';\nimport { sendChallenge } from '../components/challenge'\nimport { gpt } from '../components/gpt35'\n// import { getMessageType } from '../components/type'\nconst { App } = require('@slack/bolt');\nimport dotenv from 'dotenv';\nimport { WebClient } from \"@slack/web-api\";\n\ndotenv.config();\n\n\nfunction parseMessages(messages: any) {\n  const promptObj = messages.map((message: any) => {\n    const role = message.bot_id ? \"assistant\" : \"user\";\n    return {\n      role,\n      content: message.text,\n    };\n  });\n  return promptObj;\n}\n\n\nexport default async function slackController(fastify: FastifyInstance) {\n  fastify.post('/slack', async (req: any, res: any) => {\n    const { event } = req.body;\n\n    if (req.body.type == \"url_verification\") {\n      await sendChallenge(req, res)\n      return;\n    }\n\n\n    //check if jetdevs or imaginato slack\n\n    var slackBotToken = \"\";\n    var slackAppToken = \"\";\n    var slackSigningSecret = \"\"\n\n    switch (req.body.team_id) {\n      case \"T01QP5K3092\":  //jetdevs   \n        slackBotToken = <string>process.env.SLACK_BOT_TOKEN,\n          slackAppToken = <string>process.env.SLACK_APP_TOKEN,\n          slackSigningSecret = <string>process.env.SLACK_SIGNING_SECRET\n        break;\n      case \"T034XULRY\": //imaginato\n        slackBotToken = <string>process.env.IMG_SLACK_BOT_TOKEN,\n          slackAppToken = <string>process.env.IMG_SLACK_APP_TOKEN,\n          slackSigningSecret = <string>process.env.IMG_SLACK_SIGNING_SECRET\n        break;\n\n      default:\n        return;\n    }\n    const app = new App({\n      token: slackBotToken,\n      appToken: slackAppToken,\n      socketMode: false,\n      signingSecret: slackSigningSecret\n    });\n\n    var channel = req.body.event.channel;\n    var thread = req.body.event.ts;\n    var thread_ts = req.body.event.thread_ts;\n    var prompt = req.body.event.text;\n    var bot_id = req.body.event.bot_id;\n\n    // write a regex that matches <@U04EMPKPM35>\n    // clean up the prompt\n    let cleanPrompt = prompt.replace(/<@[A-Za-z0-9]{11}>/g, \"\");\n    let time = new Date().toLocaleString();\n    console.log(\"Prompt (\" + req.body.team_id + \") at \" + time + \": \\n\" + cleanPrompt);\n    // get options\n\n\n    res.status(200).send(\"Request received\");\n\n    switch (event.type) {\n      case \"message\":\n        // must be direct message (im)\n        if (event.channel_type != \"im\" || bot_id != null) {\n          res.status(200).end;\n          return;\n        }\n        break;\n\n      case \"app_mention\":\n        // ok\n        break;\n\n      default:\n        // do not handle\n        return;\n    }\n\n\n    const slackClient = new WebClient(slackBotToken);\n\n    let response;\n    let messageObj;\n\n    if (thread_ts) {\n      response = await slackClient.conversations.replies({\n        channel: channel,\n        ts: thread_ts,\n      });\n      messageObj = parseMessages(response.messages);\n    } else {\n      response = {};\n    }\n\n    await app.client.chat.postMessage({\n      channel: channel,\n      thread_ts: thread,\n      text: await gpt(cleanPrompt, messageObj)\n    });\n\n    return res.status(200).end;\n\n  });\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAEA,uBAA8B;AAC9B,mBAAoB;AAGpB,oBAAmB;AACnB,qBAA0B;AAF1B,MAAM,EAAE,QAAQ,QAAQ;AAIxB,sBAAO;AAGP,uBAAuB,UAAe;AACpC,QAAM,YAAY,SAAS,IAAI,CAAC,YAAiB;AAC/C,UAAM,OAAO,QAAQ,SAAS,cAAc;AAC5C,WAAO;AAAA,MACL;AAAA,MACA,SAAS,QAAQ;AAAA;AAAA;AAGrB,SAAO;AAAA;AAIT,+BAA8C,SAA0B;AACtE,UAAQ,KAAK,UAAU,OAAO,KAAU,QAAa;AACnD,UAAM,EAAE,UAAU,IAAI;AAEtB,QAAI,IAAI,KAAK,QAAQ,oBAAoB;AACvC,YAAM,oCAAc,KAAK;AACzB;AAAA;AAMF,QAAI,gBAAgB;AACpB,QAAI,gBAAgB;AACpB,QAAI,qBAAqB;AAEzB,YAAQ,IAAI,KAAK;AAAA,WACV;AACH,wBAAwB,QAAQ,IAAI,iBAClC,gBAAwB,QAAQ,IAAI,iBACpC,qBAA6B,QAAQ,IAAI;AAC3C;AAAA,WACG;AACH,wBAAwB,QAAQ,IAAI,qBAClC,gBAAwB,QAAQ,IAAI,qBACpC,qBAA6B,QAAQ,IAAI;AAC3C;AAAA;AAGA;AAAA;AAEJ,UAAM,MAAM,IAAI,IAAI;AAAA,MAClB,OAAO;AAAA,MACP,UAAU;AAAA,MACV,YAAY;AAAA,MACZ,eAAe;AAAA;AAGjB,QAAI,UAAU,IAAI,KAAK,MAAM;AAC7B,QAAI,SAAS,IAAI,KAAK,MAAM;AAC5B,QAAI,YAAY,IAAI,KAAK,MAAM;AAC/B,QAAI,SAAS,IAAI,KAAK,MAAM;AAC5B,QAAI,SAAS,IAAI,KAAK,MAAM;AAI5B,QAAI,cAAc,OAAO,QAAQ,uBAAuB;AACxD,QAAI,OAAO,IAAI,OAAO;AACtB,YAAQ,IAAI,aAAa,IAAI,KAAK,UAAU,UAAU,OAAO,SAAS;AAItE,QAAI,OAAO,KAAK,KAAK;AAErB,YAAQ,MAAM;AAAA,WACP;AAEH,YAAI,MAAM,gBAAgB,QAAQ,UAAU,MAAM;AAChD,cAAI,OAAO,KAAK;AAChB;AAAA;AAEF;AAAA,WAEG;AAEH;AAAA;AAIA;AAAA;AAIJ,UAAM,cAAc,IAAI,yBAAU;AAElC,QAAI;AACJ,QAAI;AAEJ,QAAI,WAAW;AACb,iBAAW,MAAM,YAAY,cAAc,QAAQ;AAAA,QACjD;AAAA,QACA,IAAI;AAAA;AAEN,mBAAa,cAAc,SAAS;AAAA,WAC/B;AACL,iBAAW;AAAA;AAGb,UAAM,IAAI,OAAO,KAAK,YAAY;AAAA,MAChC;AAAA,MACA,WAAW;AAAA,MACX,MAAM,MAAM,sBAAI,aAAa;AAAA;AAG/B,WAAO,IAAI,OAAO,KAAK;AAAA;AAAA;",
  "names": []
}
